Here is a list of some common Git commands, along with examples of how to use them:

1)git init: Initialize a new Git repository in the current directory. For example:
$ git init
Initialized empty Git repository in /path/to/repo/.git/

2)git clone: Clone an existing Git repository to your local machine. For example:
$ git clone https://github.com/username/repo.git
Cloning into 'repo'...
remote: Enumerating objects: 50, done.
remote: Counting objects: 100% (50/50), done.
remote: Compressing objects: 100% (38/38), done.
remote: Total 50 (delta 6), reused 43 (delta 3), pack-reused 0
Unpacking objects: 100% (50/50), done.

3)git add: Stage changes for a commit. For example:
$ git add file.txt

4)git commit: Commit changes to the repository. For example:
$ git commit -m "Add file.txt"
[master 7a3a0a9] Add file.txt
 1 file changed, 1 insertion(+)
 create mode 100644 file.txt

5)git status: Check the status of the repository, including changes that have been made but haven't been committed. For example:

$ git status
On branch master
Your branch is up to date with 'origin/master'.

Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   file.txt

no changes added to commit (use "git add" and/or "git commit -a")

6)git diff: Show differences between the working tree and the index or a tree, changes between two branches, etc. For example:
$ git diff
diff --git a/file.txt b/file.txt
index e69de29..955cadf 100644
--- a/file.txt
+++ b/file.txt
@@ -0,0 +1 @@
+This is some new text.

7)git log: Show a log of commits in the repository. For example:
$ git log
commit 7a3a0a9c867fca04e1fb5c5f5a93f8b44d5b5ed3 (HEAD -> master, origin/master)
Author: John Doe <johndoe@example.com>
Date:   Tue Feb 8 14:13:13 2022 +0100

    Add file.txt

commit 29f4b20c8e1eb1601d9e92b7432f1a7f8b22c37d
Author: Jane Doe <janedoe@example.com>
Date:   Mon Feb 7 11:23:22 2022 +0100

    Initial commit

8)git branch: List, create, or delete branches. For example:
$ git branch
* master
  feature-x

$ git branch feature-y

$ git branch -d feature-x
Deleted

